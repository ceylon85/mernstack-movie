{"ast":null,"code":"import _slicedToArray from \"/Users/heavenvoice/Desktop/code/mernstack-movie/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/heavenvoice/Desktop/code/mernstack-movie/client/src/components/views/MovieDetail/MovieDetail.js\";\nimport React, { useEffect, useState } from 'react';\nimport { API_URL, API_KEY, IMAGE_BASE_URL } from '../../Config';\nimport MainImage from '../LandingPage/Sections/MainImage';\nimport MovieInfo from './Sections/MovieInfo';\nimport GridCards from '../commons/GridCards';\nimport { Row } from 'antd';\n\nfunction MovieDetail(props) {\n  let movieId = props.match.params.movieId;\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        Movie = _useState2[0],\n        setMovie = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        Casts = _useState4[0],\n        setCasts = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        ActorToggle = _useState6[0],\n        setActorToggle = _useState6[1];\n\n  useEffect(props => {\n    let endpointCrew = \"\".concat(API_URL, \"movie/\").concat(movieId, \"/credits?api_key=\").concat(API_KEY);\n    let endpointInfo = \"\".concat(API_URL, \"movie/\").concat(movieId, \"?api_key=\").concat(API_KEY);\n    fetch(endpointInfo).then(response => response.json()).then(response => {\n      console.log(response);\n      setMovie(response);\n    });\n    fetch(endpointCrew).then(response => response.json()).then(response => {\n      setCasts(response.cast);\n    });\n  }, []);\n\n  const toggleActorView = () => {\n    setActorToggle(!ActorToggle);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(MainImage, {\n    image: \"\".concat(IMAGE_BASE_URL, \"w1280\").concat(Movie.backdrop_path),\n    title: Movie.original_title,\n    text: Movie.overview,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), \" \", React.createElement(\"div\", {\n    style: {\n      width: '85%',\n      margin: '1rem auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(MovieInfo, {\n    movie: Movie,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), \" \", React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      margin: '2rem'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: toggleActorView,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"\\uCD9C\\uC5F0 \\uBC30\\uC6B0\")), ActorToggle && React.createElement(Row, {\n    gutter: [16, 16],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, Casts && Casts.map((cast, index) => React.createElement(React.Fragment, {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(GridCards, {\n    image: cast.profile_path ? \"\".concat(IMAGE_BASE_URL, \"w500\").concat(cast.profile_path) : null,\n    characterName: cast.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }))))));\n}\n\nexport default MovieDetail;","map":{"version":3,"sources":["/Users/heavenvoice/Desktop/code/mernstack-movie/client/src/components/views/MovieDetail/MovieDetail.js"],"names":["React","useEffect","useState","API_URL","API_KEY","IMAGE_BASE_URL","MainImage","MovieInfo","GridCards","Row","MovieDetail","props","movieId","match","params","Movie","setMovie","Casts","setCasts","ActorToggle","setActorToggle","endpointCrew","endpointInfo","fetch","then","response","json","console","log","cast","toggleActorView","backdrop_path","original_title","overview","width","margin","display","justifyContent","map","index","profile_path","name"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {API_URL, API_KEY, IMAGE_BASE_URL} from '../../Config';\nimport MainImage from '../LandingPage/Sections/MainImage';\nimport MovieInfo from './Sections/MovieInfo';\nimport GridCards from '../commons/GridCards';\nimport {Row} from 'antd';\n\nfunction MovieDetail(props) {\n\n    let movieId = props.match.params.movieId\n    const [Movie,\n        setMovie] = useState([])\n    const [Casts,\n        setCasts] = useState([])\n    const [ActorToggle,\n        setActorToggle] = useState(false)\n\n    useEffect((props) => {\n        let endpointCrew = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`\n\n        let endpointInfo = `${API_URL}movie/${movieId}?api_key=${API_KEY}`\n\n        fetch(endpointInfo)\n            .then(response => response.json())\n            .then(response => {\n                console.log(response)\n                setMovie(response)\n            })\n\n        fetch(endpointCrew)\n            .then(response => response.json())\n            .then(response => {\n                setCasts(response.cast)\n            })\n    }, [])\n\n    const toggleActorView = () => {\n        setActorToggle(!ActorToggle)\n    }\n\n    return (\n        <div>\n            {/* header */}\n            <MainImage\n                image={`${IMAGE_BASE_URL}w1280${Movie.backdrop_path}`}\n                title={Movie.original_title}\n                text={Movie.overview}/> {/* Body */}\n            <div\n                style={{\n                width: '85%',\n                margin: '1rem auto'\n            }}>\n\n                {/* Movie Info */}\n                <MovieInfo movie={Movie}/>\n                <br/> {/* Actors Grid */}\n                <div\n                    style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    margin: '2rem'\n                }}>\n                    <button onClick={toggleActorView}>\n                        출연 배우\n                    </button>\n                </div>\n                {ActorToggle && <Row gutter={[16, 16]}>\n\n                    {Casts && Casts.map((cast, index) => (\n                        <React.Fragment key={index}>\n                            <GridCards\n                                image={cast.profile_path\n                                ? `${IMAGE_BASE_URL}w500${cast.profile_path}`\n                                : null}\n                                characterName={cast.name}/>\n                        </React.Fragment>\n                    ))}\n\n                </Row>\n}\n            </div>\n\n        </div>\n    )\n}\n\nexport default MovieDetail\n"]},"metadata":{},"sourceType":"module"}